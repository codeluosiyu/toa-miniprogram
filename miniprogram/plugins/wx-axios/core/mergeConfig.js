import { isPlainObject, deepMerge } from "../helpers/util";
var strats = Object.create(null);
function defaultStrat(val1, val2) {
    return typeof val2 !== 'undefined' ? val2 : val1;
}
function fromVal2Strat(val1, val2) {
    if (typeof val2 !== 'undefined') {
        return val2;
    }
}
function deepMergeStrat(val1, val2) {
    if (isPlainObject(val2)) {
        return deepMerge(val1, val2);
    }
    else if (typeof val2 !== 'undefined') {
        return val2;
    }
    else if (isPlainObject(val1)) {
        return deepMerge(val1);
    }
    else {
        return val1;
    }
}
var stratKeysFromVal2 = ['url', 'params', 'data'];
stratKeysFromVal2.forEach(function (key) {
    strats[key] = fromVal2Strat;
});
var stratKeysDeepMerge = ['headers', 'auth'];
stratKeysDeepMerge.forEach(function (key) {
    strats[key] = deepMergeStrat;
});
export default function mergeConfig(config1, config2) {
    if (!config2) {
        config2 = {};
    }
    var config = Object.create(null);
    for (var key in config2) {
        mergeField(key);
    }
    for (var key in config1) {
        if (!config2[key]) {
            mergeField(key);
        }
    }
    function mergeField(key) {
        var strat = strats[key] || defaultStrat;
        config[key] = strat(config1[key], config2[key]);
    }
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VDb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXJnZUNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBRTFELElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7QUFFbEMsU0FBUyxZQUFZLENBQUMsSUFBUyxFQUFFLElBQVM7SUFDeEMsT0FBTyxPQUFPLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ2xELENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxJQUFTLEVBQUUsSUFBUztJQUN6QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFdBQVcsRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQTtLQUNaO0FBQ0gsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLElBQVMsRUFBRSxJQUFTO0lBQzFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQTtLQUM3QjtTQUFNLElBQUksT0FBTyxJQUFJLEtBQUssV0FBVyxFQUFFO1FBQ3RDLE9BQU8sSUFBSSxDQUFBO0tBQ1o7U0FBTSxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM5QixPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUN2QjtTQUFNO1FBQ0wsT0FBTyxJQUFJLENBQUE7S0FDWjtBQUNILENBQUM7QUFFRCxJQUFNLGlCQUFpQixHQUFHLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUVuRCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO0lBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUE7QUFDN0IsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFNLGtCQUFrQixHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBRTlDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7SUFDNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGNBQWMsQ0FBQTtBQUM5QixDQUFDLENBQUMsQ0FBQTtBQUVGLE1BQU0sQ0FBQyxPQUFPLFVBQVUsV0FBVyxDQUNqQyxPQUEyQixFQUMzQixPQUE0QjtJQUU1QixJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osT0FBTyxHQUFHLEVBQUUsQ0FBQTtLQUNiO0lBRUQsSUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUVsQyxLQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtRQUN2QixVQUFVLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDaEI7SUFFRCxLQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2pCLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtTQUNoQjtLQUNGO0lBRUQsU0FBUyxVQUFVLENBQUMsR0FBVztRQUM3QixJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFBO1FBQ3pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ2xELENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBeGlvc1JlcXVlc3RDb25maWcgfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIlxuaW1wb3J0IHsgaXNQbGFpbk9iamVjdCwgZGVlcE1lcmdlIH0gZnJvbSBcIi4uL2hlbHBlcnMvdXRpbFwiXG5cbmNvbnN0IHN0cmF0cyA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuZnVuY3Rpb24gZGVmYXVsdFN0cmF0KHZhbDE6IGFueSwgdmFsMjogYW55KTogYW55IHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwyICE9PSAndW5kZWZpbmVkJyA/IHZhbDIgOiB2YWwxXG59XG5cbmZ1bmN0aW9uIGZyb21WYWwyU3RyYXQodmFsMTogYW55LCB2YWwyOiBhbnkpOiBhbnkge1xuICBpZiAodHlwZW9mIHZhbDIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHZhbDJcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWVwTWVyZ2VTdHJhdCh2YWwxOiBhbnksIHZhbDI6IGFueSk6IGFueSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KHZhbDIpKSB7XG4gICAgcmV0dXJuIGRlZXBNZXJnZSh2YWwxLCB2YWwyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwyICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB2YWwyXG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBkZWVwTWVyZ2UodmFsMSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsMVxuICB9XG59XG5cbmNvbnN0IHN0cmF0S2V5c0Zyb21WYWwyID0gWyd1cmwnLCAncGFyYW1zJywgJ2RhdGEnXVxuXG5zdHJhdEtleXNGcm9tVmFsMi5mb3JFYWNoKGtleSA9PiB7XG4gIHN0cmF0c1trZXldID0gZnJvbVZhbDJTdHJhdFxufSlcblxuY29uc3Qgc3RyYXRLZXlzRGVlcE1lcmdlID0gWydoZWFkZXJzJywgJ2F1dGgnXVxuXG5zdHJhdEtleXNEZWVwTWVyZ2UuZm9yRWFjaChrZXkgPT4ge1xuICBzdHJhdHNba2V5XSA9IGRlZXBNZXJnZVN0cmF0XG59KVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhcbiAgY29uZmlnMTogQXhpb3NSZXF1ZXN0Q29uZmlnLFxuICBjb25maWcyPzogQXhpb3NSZXF1ZXN0Q29uZmlnXG4pOiBBeGlvc1JlcXVlc3RDb25maWcge1xuICBpZiAoIWNvbmZpZzIpIHtcbiAgICBjb25maWcyID0ge31cbiAgfVxuXG4gIGNvbnN0IGNvbmZpZyA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuICBmb3IgKGxldCBrZXkgaW4gY29uZmlnMikge1xuICAgIG1lcmdlRmllbGQoa2V5KVxuICB9XG5cbiAgZm9yIChsZXQga2V5IGluIGNvbmZpZzEpIHtcbiAgICBpZiAoIWNvbmZpZzJba2V5XSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZChrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHN0cmF0ID0gc3RyYXRzW2tleV0gfHwgZGVmYXVsdFN0cmF0XG4gICAgY29uZmlnW2tleV0gPSBzdHJhdChjb25maWcxW2tleV0sIGNvbmZpZzIhW2tleV0pXG4gIH1cblxuICByZXR1cm4gY29uZmlnXG59Il19