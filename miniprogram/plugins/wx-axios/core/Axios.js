import dispatchRequest from './dispatchRequest';
import InterceptorManager from './InterceptorManager';
import mergeConfig from './mergeConfig';
var Axios = (function () {
    function Axios(initConfig) {
        this.defaults = initConfig;
        this.interceptors = {
            request: new InterceptorManager(),
            response: new InterceptorManager()
        };
    }
    Axios.prototype.request = function (url, config) {
        if (typeof url === 'string') {
            if (!config) {
                config = {};
            }
            config.url = url;
        }
        else {
            config = url;
        }
        config = mergeConfig(this.defaults, config);
        var chain = [{
                resolved: dispatchRequest,
                rejected: undefined
            }];
        this.interceptors.request.forEach(function (interceptor) {
            chain.unshift(interceptor);
        });
        this.interceptors.response.forEach(function (interceptor) {
            chain.push(interceptor);
        });
        var promise = Promise.resolve(config);
        while (chain.length) {
            var _a = chain.shift(), resolved = _a.resolved, rejected = _a.rejected;
            promise = promise.then(resolved, rejected);
        }
        return promise;
    };
    Axios.prototype.get = function (url, config) {
        return this._requestMethodWithoutData('GET', url, config);
    };
    Axios.prototype.delete = function (url, config) {
        return this._requestMethodWithoutData('DELETE', url, config);
    };
    Axios.prototype.head = function (url, config) {
        return this._requestMethodWithoutData('HEAD', url, config);
    };
    Axios.prototype.options = function (url, config) {
        return this._requestMethodWithoutData('OPTIONS', url, config);
    };
    Axios.prototype.trace = function (url, config) {
        return this._requestMethodWithoutData('TRACE', url, config);
    };
    Axios.prototype.connect = function (url, config) {
        return this._requestMethodWithoutData('CONNECT', url, config);
    };
    Axios.prototype.post = function (url, data, config) {
        return this._requestMethodWithData('POST', url, data, config);
    };
    Axios.prototype.put = function (url, data, config) {
        return this._requestMethodWithData('PUT', url, data, config);
    };
    Axios.prototype.upload = function (url, config) {
        return this._requestMethodWithoutData('UPLOAD', url, config);
    };
    Axios.prototype._requestMethodWithoutData = function (method, url, config) {
        return this.request(Object.assign(config || {}, {
            method: method,
            url: url
        }));
    };
    Axios.prototype._requestMethodWithData = function (method, url, data, config) {
        return this.request(Object.assign(config || {}, {
            method: method,
            url: url,
            data: data
        }));
    };
    return Axios;
}());
export default Axios;
//# sourceMappingURL=data:application/json;base64,