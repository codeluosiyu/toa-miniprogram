import { processHeaders } from './helpers/headers';
import { transformRequest, transformResponse } from './helpers/data';
var defaults = {
    method: 'GET',
    timeout: 0,
    headers: {
        common: {
            Accept: 'application/json, text/plain, */*'
        }
    },
    transformRequest: [
        function (data, headers) {
            processHeaders(headers, data);
            return transformRequest(data);
        }
    ],
    transformResponse: [
        function (data) {
            return transformResponse(data);
        }
    ]
};
var methodsNoData = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'TRACE'];
methodsNoData.forEach(function (method) {
    var methodLower = method.toLowerCase();
    defaults.headers[methodLower] = {};
});
var methodsWithData = ['POST', 'PUT', 'CONNECT'];
methodsWithData.forEach(function (method) {
    var methodLower = method.toLowerCase();
    defaults.headers[methodLower] = {};
});
export default defaults;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWZhdWx0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFFcEUsSUFBTSxRQUFRLEdBQXVCO0lBQ25DLE1BQU0sRUFBRSxLQUFLO0lBQ2IsT0FBTyxFQUFFLENBQUM7SUFDVixPQUFPLEVBQUU7UUFDUCxNQUFNLEVBQUU7WUFDTixNQUFNLEVBQUUsbUNBQW1DO1NBQzVDO0tBQ0Y7SUFDRCxnQkFBZ0IsRUFBRTtRQUNoQixVQUFVLElBQVMsRUFBRSxPQUFZO1lBQy9CLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7WUFDN0IsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMvQixDQUFDO0tBQ0Y7SUFFRCxpQkFBaUIsRUFBRTtRQUNqQixVQUFVLElBQVM7WUFDakIsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNoQyxDQUFDO0tBQ0Y7Q0FDRixDQUFBO0FBQ0QsSUFBTSxhQUFhLEdBQWtCLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0FBRWxGLGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNO0lBQzFCLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUN4QyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNwQyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQU0sZUFBZSxHQUFrQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFFakUsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07SUFDNUIsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ3hDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ3BDLENBQUMsQ0FBQyxDQUFBO0FBRUYsZUFBZSxRQUFRLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBeGlvc1JlcXVlc3RDb25maWcsIE1ldGhvZCB9IGZyb20gJy4vdHlwZXMvaW5kZXgnXHJcbmltcG9ydCB7IHByb2Nlc3NIZWFkZXJzIH0gZnJvbSAnLi9oZWxwZXJzL2hlYWRlcnMnXHJcbmltcG9ydCB7IHRyYW5zZm9ybVJlcXVlc3QsIHRyYW5zZm9ybVJlc3BvbnNlIH0gZnJvbSAnLi9oZWxwZXJzL2RhdGEnXHJcblxyXG5jb25zdCBkZWZhdWx0czogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xyXG4gIG1ldGhvZDogJ0dFVCcsXHJcbiAgdGltZW91dDogMCxcclxuICBoZWFkZXJzOiB7XHJcbiAgICBjb21tb246IHtcclxuICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgdHJhbnNmb3JtUmVxdWVzdDogW1xyXG4gICAgZnVuY3Rpb24gKGRhdGE6IGFueSwgaGVhZGVyczogYW55KTogYW55IHtcclxuICAgICAgcHJvY2Vzc0hlYWRlcnMoaGVhZGVycywgZGF0YSlcclxuICAgICAgcmV0dXJuIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSlcclxuICAgIH1cclxuICBdLFxyXG5cclxuICB0cmFuc2Zvcm1SZXNwb25zZTogW1xyXG4gICAgZnVuY3Rpb24gKGRhdGE6IGFueSk6IGFueSB7XHJcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKVxyXG4gICAgfVxyXG4gIF1cclxufVxyXG5jb25zdCBtZXRob2RzTm9EYXRhOiBBcnJheTxNZXRob2Q+ID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdUUkFDRSddXHJcblxyXG5tZXRob2RzTm9EYXRhLmZvckVhY2gobWV0aG9kID0+IHtcclxuICBjb25zdCBtZXRob2RMb3dlciA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpXHJcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RMb3dlcl0gPSB7fVxyXG59KVxyXG5cclxuY29uc3QgbWV0aG9kc1dpdGhEYXRhOiBBcnJheTxNZXRob2Q+ID0gWydQT1NUJywgJ1BVVCcsICdDT05ORUNUJ11cclxuXHJcbm1ldGhvZHNXaXRoRGF0YS5mb3JFYWNoKG1ldGhvZCA9PiB7XHJcbiAgY29uc3QgbWV0aG9kTG93ZXIgPSBtZXRob2QudG9Mb3dlckNhc2UoKVxyXG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kTG93ZXJdID0ge31cclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzIl19